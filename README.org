* Great Problems

** Installing
To install and run this project:
- Install [[https://github.com/obsidiansystems/obelisk][Obelisk]]
- Clone this project
- Set up the database (see below)
- Go into the project directory and run ~ob run~. This will compile the project using GHC and run it locally on http://localhost:8000/.

*** Setting up the database (Ubuntu 18.04)
#+BEGIN_SRC
$ sudo apt install postgresql postgresql-contrib
$ sudo -u postgres psql
postgres=# create database great_problems;
postgres=# create user great_problems with encrypted password 'mypass';
postgres=# grant all privileges on database great_problems to great_problems;
postgres=# \c great_problems
great_problems=# CREATE EXTENSION citext;
great_problems=# \q
$ cp config/backend/db.env.example config/backend/db.env
#+END_SRC

Edit the environment variables in ~config/backend/db.env~ with the database connection settings.

Environment variables and their defaults:
#+BEGIN_SRC
DB_HOST=localhost
DB_PORT=5432
DB_USER=great_problems
DB_PASSWORD=mypass
DB_NAME=great_problems
#+END_SRC

To setup the database, use the repl:
#+BEGIN_SRC
$ ob repl
*Backend Obelisk.Run Frontend Backend> Database.setup
#+END_SRC
This will create the empty tables and insert the seeds.

To reset the database, use the repl:
#+BEGIN_SRC
$ ob repl
*Backend Obelisk.Run Frontend Backend> Database.reset
#+END_SRC
This will create the empty tables (dropping if they exist) and insert the seeds.

** API Routes

*** Problems
~GET /api/problems/?topic={id}&author={id}&expand=author,topic&include=topic_path~

Get a list of problems. Optional query parameters for topic, author, expanding the topic or author, and including the topic path. The topic parameter is for any topic in the branch; not necessarily a direct match.

~POST /api/problems/~

Create a new problem. Request body should contain a Common.Api.NewProblem as JSON.

~GET /api/problems/{id}?expand=author,topic&include=topic_path~

Get a single problem.

**** Samples
~GET /api/problems/~
#+begin_src js
[
  {
    "summary": "Find the present value ...",
    "topicPath": null,
    "contents": "\n\\runParam{paramFormat = decimal}\n ...",
    "topic": {
      "Left": 14
    },
    "updated_at": "2021-08-07T12:03:21.678487Z",
    "created_at": "2021-08-07T12:03:21.678487Z",
    "author": {
      "Left": 2
    },
    "id": 1
  },
  {
    "summary": "Consider the wide-swing current mirror ...",
    "topicPath": null,
    "contents": "\n\\runParam{I_D = [30, 20, 10, 40]  ...",
    "topic": {
      "Left": 9
    },
    "updated_at": "2021-08-07T12:03:21.678487Z",
    "created_at": "2021-08-07T12:03:21.678487Z",
    "author": {
      "Left": 1
    },
    "id": 2
  }
]
#+end_src

~GET /api/problems/?topic=9&expand=author,topic&include=topic_path~
#+begin_src js
[
  {
    "summary": "Consider the wide-swing current mirror ...",
    "topicPath": [
      {
        "name": "Electrical Engineering",
        "id": 4,
        "parent_id": null
      },
      {
        "name": "Analog Circuits",
        "id": 9,
        "parent_id": 4
      }
    ],
    "contents": "\n\\runParam{I_D = [30, 20, 10, 40] ...",
    "topic": {
      "Right": {
        "name": "Analog Circuits",
        "id": 9,
        "parent_id": 4
      }
    },
    "updated_at": "2021-08-07T12:03:21.678487Z",
    "created_at": "2021-08-07T12:03:21.678487Z",
    "author": {
      "Right": {
        "email": "alice@email.com",
        "full_name": "Alice",
        "id": 1
      }
    },
    "id": 2
  }
]
#+end_src
*** Topics
~GET /api/topics?parent={null|id}~

Get a list of topics.

~parent=null~ means topics which have no parent (root topics)

**** Samples
~GET /api/topics~
#+BEGIN_SRC js
[
  {
    "name": "Astronomy",
    "id": 1,
    "parent_id": null
  },
  {
    "name": "Biology",
    "id": 2,
    "parent_id": null
  },
  {
    "name": "Chemistry",
    "id": 3,
    "parent_id": null
  },
  {
    "name": "Electrical Engineering",
    "id": 4,
    "parent_id": null
  },
  {
    "name": "Mathematics",
    "id": 5,
    "parent_id": null
  },
  {
    "name": "Physics",
    "id": 6,
    "parent_id": null
  },
  {
    "name": "Psychology",
    "id": 7,
    "parent_id": null
  },
  {
    "name": "Statistics",
    "id": 8,
    "parent_id": null
  },
  {
    "name": "Analog Circuits",
    "id": 9,
    "parent_id": 4
  },
  {
    "name": "Calculus",
    "id": 10,
    "parent_id": 5
  },
  {
    "name": "Group Theory",
    "id": 11,
    "parent_id": 5
  },
  {
    "name": "Differential Equations",
    "id": 12,
    "parent_id": 10
  },
  {
    "name": "Limits",
    "id": 13,
    "parent_id": 10
  },
  {
    "name": "Rates",
    "id": 14,
    "parent_id": 10
  }
]
#+END_SRC

~GET /api/topics?parent=null~
#+BEGIN_SRC js
[
  {
    "name": "Astronomy",
    "id": 1,
    "parent_id": null
  },
  {
    "name": "Biology",
    "id": 2,
    "parent_id": null
  },
  {
    "name": "Chemistry",
    "id": 3,
    "parent_id": null
  },
  {
    "name": "Electrical Engineering",
    "id": 4,
    "parent_id": null
  },
  {
    "name": "Mathematics",
    "id": 5,
    "parent_id": null
  },
  {
    "name": "Physics",
    "id": 6,
    "parent_id": null
  },
  {
    "name": "Psychology",
    "id": 7,
    "parent_id": null
  },
  {
    "name": "Statistics",
    "id": 8,
    "parent_id": null
  }
]
#+END_SRC

~GET /api/topics?parent=5~
#+begin_src js
[
  {
    "name": "Calculus",
    "id": 10,
    "parent_id": 5
  },
  {
    "name": "Group Theory",
    "id": 11,
    "parent_id": 5
  }
]
#+end_src

~GET /api/topics?parent=999~
#+begin_src js
[]
#+end_src

*** Topic Hierarchy
~GET /api/topic-hierarchy/{id}~

Get the hierarchy of topics, ending with the children of the given topic. The Either type is used to keep track of unselected and selected topics, respectively Left and Right.

**** Samples
~GET /api/topic-hierarchy/5~
#+begin_src js
[
  [
    {
      "Left": {
        "name": "Astronomy",
        "id": 1,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Biology",
        "id": 2,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Chemistry",
        "id": 3,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Electrical Engineering",
        "id": 4,
        "parent_id": null
      }
    },
    {
      "Right": {
        "name": "Mathematics",
        "id": 5,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Physics",
        "id": 6,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Psychology",
        "id": 7,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Statistics",
        "id": 8,
        "parent_id": null
      }
    }
  ],
  [
    {
      "Left": {
        "name": "Calculus",
        "id": 10,
        "parent_id": 5
      }
    },
    {
      "Left": {
        "name": "Group Theory",
        "id": 11,
        "parent_id": 5
      }
    }
  ]
]
#+end_src

~GET /api/topic-hierarchy/10~
#+begin_src js
[
  [
    {
      "Left": {
        "name": "Astronomy",
        "id": 1,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Biology",
        "id": 2,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Chemistry",
        "id": 3,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Electrical Engineering",
        "id": 4,
        "parent_id": null
      }
    },
    {
      "Right": {
        "name": "Mathematics",
        "id": 5,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Physics",
        "id": 6,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Psychology",
        "id": 7,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Statistics",
        "id": 8,
        "parent_id": null
      }
    }
  ],
  [
    {
      "Right": {
        "name": "Calculus",
        "id": 10,
        "parent_id": 5
      }
    },
    {
      "Left": {
        "name": "Group Theory",
        "id": 11,
        "parent_id": 5
      }
    }
  ],
  [
    {
      "Left": {
        "name": "Differential Equations",
        "id": 12,
        "parent_id": 10
      }
    },
    {
      "Left": {
        "name": "Limits",
        "id": 13,
        "parent_id": 10
      }
    },
    {
      "Left": {
        "name": "Rates",
        "id": 14,
        "parent_id": 10
      }
    }
  ]
]
#+end_src

~GET /api/topic-hierarchy/13~
#+begin_src js
[
  [
    {
      "Left": {
        "name": "Astronomy",
        "id": 1,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Biology",
        "id": 2,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Chemistry",
        "id": 3,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Electrical Engineering",
        "id": 4,
        "parent_id": null
      }
    },
    {
      "Right": {
        "name": "Mathematics",
        "id": 5,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Physics",
        "id": 6,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Psychology",
        "id": 7,
        "parent_id": null
      }
    },
    {
      "Left": {
        "name": "Statistics",
        "id": 8,
        "parent_id": null
      }
    }
  ],
  [
    {
      "Right": {
        "name": "Calculus",
        "id": 10,
        "parent_id": 5
      }
    },
    {
      "Left": {
        "name": "Group Theory",
        "id": 11,
        "parent_id": 5
      }
    }
  ],
  [
    {
      "Left": {
        "name": "Differential Equations",
        "id": 12,
        "parent_id": 10
      }
    },
    {
      "Right": {
        "name": "Limits",
        "id": 13,
        "parent_id": 10
      }
    },
    {
      "Left": {
        "name": "Rates",
        "id": 14,
        "parent_id": 10
      }
    }
  ],
  []
]
#+end_src

~GET /api/topic-hierarchy/999~
#+begin_src js
{
  "error": true,
  "message": "Topic not found"
}
#+end_src


*** Users
(TODO)

*** Register
(TODO)

*** VerifyEmail
(TODO)

*** SignIn
(TODO)

*** SignOut
(TODO)

*** Compile
(TODO)

** Development

*** Explicit import style
All imports should be qualified except for Global. This helps with code clarity; it is easy to tell where a variable/function comes from (without the use of an IDE). It also allows for local variables and functions to be given meaningful yet short names.

Extra import information is outputted to ~imports/~ (ghc-options: ~-ddump-minimal-imports -dumpdir imports~).

*** Reflex variable naming
Reflex has three main data types: Event, Behavior, and Dynamic. Instead of giving variables of these types special prefixes (e.g., ~evProblemText~) or suffixes (e.g., ~problemTextE~), their type should be clear from context or explicit type signatures (e.g., ~problemText :: Event t Text~).

*** Adding dependencies
Add the dependency to the appropriate .cabal file (frontend.cabal or backend.cabal) in ~build-depends~. If the dependency is not in Obelisk's curated list, proceed to the following instructions.

Add dependencies from Hackage or GitHub by updating default.nix, as per the [[https://github.com/obsidiansystems/obelisk/blob/master/FAQ.md#how-do-i-add-or-override-haskell-dependencies-in-the-package-set][Obelisk guide]]:

#+BEGIN_SRC nix
# ...
project ./. ({ pkgs, ... }: {
# ...
  overrides = self: super: let
    aesonSrc = pkgs.fetchFromGitHub {
      owner = "obsidiansystems";
      repo = "aeson-gadt-th";
      rev = "ed573c2cccf54d72aa6279026752a3fecf9c1383";
      sha256 = "08q6rnz7w9pn76jkrafig6f50yd0f77z48rk2z5iyyl2jbhcbhx3";
    };
  in
  {
    aeson = self.callCabal2nix "aeson" aesonSrc {};
    waargonaut = self.callHackageDirect {
      pkg = "waargonaut";
      ver = "0.8.0.1";
      sha256 = "1zv28np3k3hg378vqm89v802xr0g8cwk7gy3mr77xrzy5jbgpa39";
    } {};
  };
# ...
#+END_SRC

Let ~ob run~ fail with the expected ~sha256~ and update the value accordingly.

NOTE: It may be necessary to run ~nix-collect-garbage~ to clear the cache before ~ob run~.
