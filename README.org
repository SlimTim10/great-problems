* Great Problems

** Running
To run locally, install [[https://github.com/obsidiansystems/obelisk][Obelisk]], go into the project directory, and run ~ob run~. This will compile the examples using ghc and run them locally on http://localhost:8000/.

** Development

*** Explicit import style
All imports should be qualified except for Global. This helps with code clarity; it is easy to tell where a variable/function comes from (without the use of an IDE). It also allows for local variables and functions to be given meaningful yet short names.

Extra import information is outputted to ~imports/~ (ghc-options: ~-ddump-minimal-imports -dumpdir imports~).

*** Reflex variable naming
Reflex has three main data types: Event, Behavior, and Dynamic. Instead of giving variables of these types special prefixes (e.g., ~evProblemText~) or suffixes (e.g., ~problemTextE~), their type should be clear from context or explicit type signatures (e.g., ~problemText :: Event t Text~).

*** Adding dependencies
Add the dependency to the appropriate .cabal file (frontend.cabal or backend.cabal) in ~build-depends~. If the dependency is not in Obelisk's curated list, proceed to the following instructions.

Add dependencies from Hackage or GitHub by updating default.nix, as per the [[https://github.com/obsidiansystems/obelisk/blob/master/FAQ.md#how-do-i-add-or-override-haskell-dependencies-in-the-package-set][Obelisk guide]]:

#+BEGIN_SRC nix
# ...
project ./. ({ pkgs, ... }: {
# ...
  overrides = self: super: let
    aesonSrc = pkgs.fetchFromGitHub {
      owner = "obsidiansystems";
      repo = "aeson-gadt-th";
      rev = "ed573c2cccf54d72aa6279026752a3fecf9c1383";
      sha256 = "08q6rnz7w9pn76jkrafig6f50yd0f77z48rk2z5iyyl2jbhcbhx3";
    };
  in
  {
    aeson = self.callCabal2nix "aeson" aesonSrc {};
    waargonaut = self.callHackageDirect {
      pkg = "waargonaut";
      ver = "0.8.0.1";
      sha256 = "1zv28np3k3hg378vqm89v802xr0g8cwk7gy3mr77xrzy5jbgpa39";
    } {};
  };
# ...
#+END_SRC

Let `ob run` fail with the expected `sha256` and update the value accordingly.

NOTE: It may be necessary to run `nix-collect-garbage` to clear the cache before `ob run`.

*** Setting up the database (Ubuntu 18.04)
#+BEGIN_SRC
$ sudo apt install postgresql postgresql-contrib
$ sudo -u postgres psql
postgres=# create database great_problems;
postgres=# create user myuser with encrypted password 'mypass';
postgres=# grant all privileges on database great_problems to myuser;
postgres=# \c great_problems
great_problems=# CREATE EXTENSION citext;
great_problems=# \q
$ ob run
#+END_SRC

Edit the environment variables in ~config/backend/db.env~ with the database connection settings. Running the app (~ob run~) should load the schema and seeds into the database.

Environment variables and their defaults:
#+BEGIN_SRC
DB_HOST=localhost
DB_PORT=5432
DB_USER=root
DB_PASSWORD=root
DB_NAME=great_problems
#+END_SRC

To reset the database, use the repl:
#+BEGIN_SRC
$ ob repl
*Backend Obelisk.Run Frontend Backend> Database.reset
#+END_SRC
