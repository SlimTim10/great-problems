{-# LANGUAGE QuasiQuotes #-}

module Database.Schema where

import qualified Database.PostgreSQL.Simple as SQL
import qualified Database.PostgreSQL.Simple.SqlQQ as SqlQQ
import Global

load :: SQL.Connection -> IO ()
load conn = void $ SQL.execute_ conn [SqlQQ.sql|
  CREATE TABLE IF NOT EXISTS users (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    display_name TEXT NOT NULL UNIQUE,
    email CITEXT NOT NULL UNIQUE,
    password TEXT NOT NULL
  );

  CREATE TABLE IF NOT EXISTS topics (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name TEXT NOT NULL UNIQUE,
    parent_id BIGINT,
    FOREIGN KEY(parent_id) REFERENCES topics(id)
  );

  CREATE TABLE IF NOT EXISTS problems (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    title TEXT NOT NULL,
    description TEXT,
    contents TEXT NOT NULL,
    thumnail_url TEXT NOT NULL,
    author_id BIGINT NOT NULL,
    topic_id BIGINT NOT NULL,
    FOREIGN KEY(author_id) REFERENCES users(id),
    FOREIGN KEY(topic_id) REFERENCES topics(id)
  );

  CREATE TABLE IF NOT EXISTS figures (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    url TEXT NOT NULL,
    problem_id BIGINT NOT NULL,
    FOREIGN KEY(problem_id) REFERENCES problems(id)
  );
  |]

unload :: SQL.Connection -> IO ()
unload conn = void $ SQL.execute_ conn [SqlQQ.sql|
  DROP TABLE users CASCADE;
  DROP TABLE topics CASCADE;
  DROP TABLE problems CASCADE;
  DROP TABLE figures CASCADE;
  |]
