import Obelisk.Route ( pattern (:/) )
import qualified Obelisk.Backend as Ob ( Backend(..) )
import qualified Control.Monad.IO.Class as IO ( MonadIO(..) )
import qualified Snap.Core as Snap
    ( Snap,
      Cookie(Cookie),
      MonadSnap,
      expireCookie,
      getRequest,
      modifyResponse,
      readCookie,
      readRequestBody,
      writeLBS,
      addResponseCookie,
      setHeader,
      Method(POST, GET),
      Request(rqMethod) )
import qualified Servant.Auth.Server as SAS
    ( generateKey,
      defaultCookieSettings,
      defaultJWTSettings,
      makeSessionCookieBS,
      verifyJWT,
      ToJWT,
      JWTSettings,
      AuthResult(Authenticated, Indefinite) )
import qualified Data.Aeson as JSON ( decode, encode, ToJSON )
import qualified Data.Map as Map ( lookup )
import qualified Database.PostgreSQL.Simple as SQL ( Connection )
import qualified Data.Word as Word ( Word64 )
import qualified Data.ByteString as B ( ByteString )
import qualified Common.Route as Route
    ( FrontendRoute,
      Api(Api_SignOut, Api_SignIn, Api_TopicHierarchy, Api_Users,
          Api_Topics, Api_Problems),
      BackendRoute(..),
      fullRouteEncoder )
import qualified Common.Api.Error as Error ( mk )
import qualified Database ( connect )
import qualified Database.Queries as Queries
    ( getProblems,
      getProblemById,
      addProblem,
      getTopics,
      getTopicById,
      getRootTopics,
      getTopicsByParentId,
      getTopicHierarchy,
      getUsers,
      getUserById,
      authenticate )
import qualified Common.Api.User as User ( User(role, id) )
import qualified Common.Api.Role as Role
    ( Role(Moderator, Contributor) )
import qualified Common.Api.Auth as Auth ( Auth )
import qualified Common.Api.NewProblem as NewProblem
    ( NewProblem(author_id) )
import Global ( Text, fromMaybe, cs, readMaybe )
