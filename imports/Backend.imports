import qualified Data.ByteString as BS ( ByteString, concat )
import qualified Data.ByteString.Lazy as LBS ( ByteString )
import qualified Data.Text as T ( null )
import qualified Control.Monad.IO.Class as IO ( MonadIO(..) )
import qualified Data.Aeson as JSON ( decode, encode, ToJSON )
import qualified Data.Map as Map ( lookup )
import qualified Data.Word as Word ( Word64 )
import qualified Data.CaseInsensitive as CI ( CI(original) )
import qualified Database.PostgreSQL.Simple as SQL ( Connection )
import qualified Network.Wreq as Wreq
    ( partFile, partText, post, responseBody, Part )
import qualified Snap.Core as Snap
    ( expireCookie,
      getCookie,
      getRequest,
      modifyResponse,
      readRequestBody,
      writeLBS,
      addResponseCookie,
      rqPostParam,
      setHeader,
      MonadSnap,
      Snap,
      Cookie(Cookie, cookieValue),
      Method(POST, GET),
      Request(rqMethod) )
import qualified Snap.Util.FileUploads as Snap
    ( allowWithMaximumSize,
      defaultUploadPolicy,
      handleFileUploads,
      handleMultipart,
      PartInfo(partFileName) )
import qualified System.Directory as Sys
    ( createDirectoryIfMissing,
      getTemporaryDirectory,
      removeDirectoryRecursive,
      renameFile )
import System.FilePath ( (</>) )
import qualified Obelisk.Backend as Ob ( Backend(..) )
import Obelisk.Route ( pattern (:/) )
import qualified Common.Route as Route
    ( FrontendRoute,
      Api(Api_Compile, Api_SignOut, Api_SignIn, Api_VerifyEmail,
          Api_Register, Api_TopicHierarchy, Api_Users, Api_Topics,
          Api_Problems),
      BackendRoute(..),
      fullRouteEncoder )
import qualified Common.Api.Error as Error ( mk )
import qualified Database ( connect )
import qualified Database.Queries as Queries
    ( getProblems,
      getProblemById,
      createProblem,
      updateProblem,
      getTopics,
      getTopicById,
      getRootTopics,
      getTopicsByParentId,
      getTopicHierarchy,
      getUsers,
      getUserById,
      getUserByEmail,
      registerUser,
      verifyEmail,
      newEmailVerification )
import qualified S3 ( Env, setup, putFigureDirectory )
import qualified Common.Api.User as User ( User(role, id) )
import qualified Common.Api.Register as Register
    ( Register(password, email, fullName) )
import qualified Common.Api.Role as Role
    ( Role(Moderator, Contributor) )
import qualified Common.Api.OkResponse as OkResponse
    ( OkResponse(OkResponse) )
import qualified Common.Api.Compile as Compile
    ( IcemakerResponse(terminalOutput, pdfContent, errorLatex,
                       errorIcemaker),
      Response(Response, resTerminalOutput, resPdfContent, resErrorLatex,
               resErrorIcemaker),
      RequestParam(ParamOutputOption, ParamRandomizeVariables,
                   ParamContent),
      OutputOption(QuestionOnly) )
import qualified Common.Api.Problem as Problem
    ( RequestParam(ParamAuthorId, ParamTopicId, ParamContent,
                   ParamSummary, ParamProblemId),
      UpdateProblem(UpdateProblem, upAuthorId, upTopicId, upContent,
                    upSummary, upProblemId),
      CreateProblem(CreateProblem, cpAuthorId, cpTopicId, cpContent,
                    cpSummary),
      Problem(content, id) )
import qualified Auth
    ( Auth,
      AuthResult(Authenticated, Unverified, Indefinite),
      Session,
      authCheck,
      newSession,
      removeSession,
      getUser )
import qualified Email ( sendEmailVerification )
import qualified Util ( generateRandomText )
import Global
    ( when,
      Text,
      fromMaybe,
      catMaybes,
      isNothing,
      (<&>),
      void,
      mfilter,
      (^.),
      cs,
      readMaybe )
