import qualified Data.Map as Map ( mapKeys )
import qualified Language.Javascript.JSaddle as JS ( MonadJSM )
import qualified JSDOM.Types ( File )
import qualified Data.CaseInsensitive as CI ( CI(original) )
import qualified Obelisk.Route.Frontend as Ob
    ( R, routeLink, RouteToUrl, SetRoute )
import qualified Reflex.Dom.Core as R
    ( constDyn,
      ffor,
      tagPromptlyDyn,
      blank,
      dyn_,
      elClass,
      text,
      decodeText,
      MonadHold(holdDyn),
      MonadSample,
      Reflex(updated, Dynamic, Event),
      PerformEvent(performEvent, Performable),
      PostBuild(..),
      TriggerEvent,
      HasJSContext,
      DomBuilder,
      Prerender )
import qualified MyReflex.Dom.Xhr.FormData as R'
    ( FormValue(FormValue_Text) )
import qualified Common.Route as Route
    ( FrontendRoute(FrontendRoute_Explore),
      Api(Api_Problems, Api_Compile),
      apiHref )
import qualified Common.Api.Compile as Compile
    ( Response,
      RequestParam(ParamOutputOption, ParamRandomizeVariables),
      Request(Request, outputOption, randomizeVariables),
      OutputOption(..) )
import qualified Common.Api.Problem as Problem
    ( GetParamInclude(TopicPath),
      GetParams(GetParams, gpTopic, gpInclude, gpExpand),
      Problem(author, updatedAt, summary, id),
      getParamsToRouteQuery )
import qualified Common.Api.User as User ( User(fullName) )
import qualified Problem.PdfViewer as PdfViewer ( widget )
import qualified Widget.Button as Button
    ( secondarySmall, primarySmallClass' )
import qualified Widget.Input as Input ( checkboxClass )
import qualified Problem.Loading as Loading
    ( WithLoading(WithLoading), anyLoading, latestAction )
import qualified Util
    ( getOnload, formBool, postForm, notUpdatedSince )
import Global ( MonadFix, Text, Map, cs, (:/), (=:) )
